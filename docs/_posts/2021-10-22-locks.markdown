---
layout: post
title:  "Learning about Locks!"
date:   2021-10-22 17:22:00 -0000
categories: programming
---

I've used locks in my programming for a while now and I sort of understand how
they're implemented using atomic operations. However, I've never implemented
one myself. We're going to change that!

I picked up, more like got a digital copy, of Shavit and Herlihy's The Art of
Multiprocessor Programming. So let's implement some locks.

# Test-and-Set and Test-Test-and-Set lock

This one's simple enough. You check a variable to know if the lock is up for
grab or not. If it is, feel free to take it. Just make sure the test-and-set
operation is atomic, hence the name.

```cpp
class taslock_t {
public:
  taslock_t() : l(false) {}

  void lock() {
    while (l.exchange(true))
      ;
  }

  void unlock() { l.store(false); }

private:
  std::atomic<bool> l;
};
```

We can improve this lock by making it into a test-test-and-set lock. Because of
cache coherence, many cores performing writes to a variable at the same time,
TAS operations in our case, degrades performance. We can avoid too many TAS
operations by checking if the variable is set first.

```cpp
class ttaslock_t {
public:
  ttaslock_t() : l(false) {}

  void lock() {
    while (true) {
      if (!l.exchange(true))
        break;
      while (l.load())
        ;
    }
  }

  void unlock() { l.store(false); }

private:
  std::atomic<bool> l;
};
```

A pretty crude experiment shows our result. The time shown is the number of
microseconds it took for the threads to acquire the lock a total of 50,000
times.

![Time vs. threads plot]({{ site.baseurl }}/assets/21/10/25/time.png)

Okay, that wasn't too bad. But we still have a lot of activity on the same
place in memory `l`. We'll try to do better with queue locks in the next post.
